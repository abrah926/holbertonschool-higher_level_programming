# Test: Check instantiation
>>> my_list = MyList()
>>> isinstance(my_list, MyList)
True
>>> isinstance(my_list, list)
True

# Test: Check __str__ method (inherited from list)
>>> str(my_list)
'[]'

# Test: Check append method
>>> my_list.append(1)
>>> my_list.append(4)
>>> my_list.append(2)
>>> my_list.append(3)
>>> my_list.append(5)
>>> my_list
[1, 4, 2, 3, 5]

# Test: Check print_sorted() with list already sorted
>>> sorted_list = MyList()
>>> sorted_list.append(1)
>>> sorted_list.append(2)
>>> sorted_list.append(3)
>>> sorted_list.append(4)
>>> sorted_list.append(5)
>>> sorted_list.print_sorted()
[1, 2, 3, 4, 5]
>>> sorted_list
[1, 2, 3, 4, 5]

# Test: Check print_sorted() with list not sorted
>>> not_sorted_list = MyList()
>>> not_sorted_list.append(10)
>>> not_sorted_list.append(7)
>>> not_sorted_list.append(5)
>>> not_sorted_list.append(8)
>>> not_sorted_list.append(6)
>>> not_sorted_list.print_sorted()
[5, 6, 7, 8, 10]
>>> not_sorted_list
[10, 7, 5, 8, 6]

# Test: Check print_sorted() with negative numbers
>>> mixed_list = MyList()
>>> mixed_list.append(3)
>>> mixed_list.append(-1)
>>> mixed_list.append(0)
>>> mixed_list.append(2)
>>> mixed_list.append(-5)
>>> mixed_list.print_sorted()
[-5, -1, 0, 2, 3]
>>> mixed_list
[3, -1, 0, 2, -5]

# Test: Check print_sorted() with empty list
>>> empty_list = MyList()
>>> empty_list.print_sorted()
[]

# Test: Check print_sorted() returns a new sorted list (not modifying the original list)
>>> modifiable_list = MyList()
>>> modifiable_list.append(9)
>>> modifiable_list.append(2)
>>> modifiable_list.append(4)
>>> modifiable_list.append(3)
>>> sorted_modifiable_list = modifiable_list.print_sorted()
>>> modifiable_list
[9, 2, 4, 3]

# Correct output - case: class creation and regular print
>>> print(my_list)
[1, 4, 2, 3, 5]

# Correct output - case: class creation, append, regular print and sorted print
>>> print(mixed_list)
[3, -1, 0, 2, -5]
>>> mixed_list.print_sorted()
[-5, -1

